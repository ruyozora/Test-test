<script>$(document).ready(function() { makeTabs('tab', 6); });</script>

<!-- 
    Тестовое задание 
-->

<div class="tab" id="tab1">
    <div class="header">
        <h1>Тестовое задание</h1>
        <div class="icon-chevron-down"></div>
    </div>
    
    <div class="body">
        <h2>Краткое описание предметной области</h2>
        <p>Пусть у нас имеются очереди в два магазина (по одной очереди в 
            каждый магазин) — продовольственный и хозяйственный. Участники очереди – 
            люди, причем это могут быть только:</p>

        <ul>
            <li>«Взрослые люди»</li>
            <li>«Ветераны»</li>
        </ul>

        <p>Очередь обычная – кто первый встал в нее, тот и будет первый в очереди, кто 
            последний — тот и будет последним. Но есть исключения:</p>

        <ul>
            <li>В очереди в хозяйственный магазин «Ветераны» проходят без очереди 
                (то есть встают сразу в начало, при этом, если есть уже «Ветеран» в 
                начале очереди, следующий встающий в очередь «Ветеран» встает ЗА ним и 
                так далее).</li>

            <li>В очереди в продовольственный магазин такая особенность: число мест в 
                очереди ограничено 10-ю (то есть 11-й человек встать в очередь уже 
                не может).</li>
        </ul>

        <p>При этом в каждом из магазинов есть свой набор продающихся товаров, 
            например:</p>
        <ul>
            <li>
                Хозяйственный магазин

                <ul>
                    <li>Мыло</li>
                    <li>Веревка</li>
                    <li>Табуретка</li>
                    <li>И так далее</li>
                </ul>
            </li>

            <li>
                Продовольственный магазин

                <ul>
                    <li>Колбаса</li>
                    <li>Хлеб</li>
                    <li>Макароны</li>
                    <li>И так далее</li>
                </ul>
            </li>
        </ul>


        <p>Один и тот же товар не может продаваться сразу в обоих магазинах.</p>
        <p>Каждый человек стоит только в одной очереди (то есть только в один из 
            магазинов).</p>
        <p>Каждый человек стоит за нужным ему набором товаров, причем, товары только из 
            того магазина, в который он стоит.</p>

        <h2>Требования к реализации и интерфейсу</h2>
        <p>В целом, нужно построить классы на php и создать структуру базы данных для 
            упрощенного моделирования вышеописанной ситуации.</p>
        <p>Товары, люди, магазины и связи между ними должны храниться в базе данных 
            (не в коде классов).</p>
        <p>Оформление и верстка не имеют значения (можно использовать просто 
            теги без css).</p>
        <p>При написании кода нужно использовать MVC подход. Базу желательно 
            использовать MySQL или PostgreSQL.</p>
        <p>Результат – сайт с возможностями, перечисленными ниже (набор скриптов, 
            html’ки, дамп БД):</p>
        <ul class="large-text">
            <li>Для магазинов нужно иметь возможность только добавлять и удалять товары 
                (выбор магазина из выпадающего списка — показывается список его товаров, 
                кнопки «добавить товар», «удалить»). Это должно быть реализовано через 
                методы соответствующих объектов (с сохранением в БД). Причем, если товар 
                уже выбран хотя бы одним человеком в очереди, удалить товар нельзя. 
                Обратите внимание, речь идет НЕ о количестве товара, а именно о товаре 
                как таковом, то есть, например «манка», «гречка», «рюмки».</li>

            <li>Должен быть метод «показать текущее состояние очереди» — он печатает 
                список стоящих в очереди людей по порядку. Т.к. очереди у нас 2, то 
                интерфейсно это просто размещение кнопки «Показать состояние очередей» и 
                вывод стоящих в очередях людей по порядку.</li>

            <li>Нужно кнопку «создать человека» - создание нового человека и сохранение 
                в БД, у человека есть ФИО.</li>

            <li>Кнопка «добавить человека в очередь» - выбираем человека, еще не 
                стоящего в очереди, выбираем нужную очередь, выбираем продукты, за 
                которыми он будет стоять, и жмем «сохранить», создаются соответствующие 
                объекты и происходит сохранение в БД и пересчет мест в очереди с учетом 
                вновь добавленного туда человека. Если очередь уже заполнена, выдавать 
                сообщение «Очередь заполнена» и не добавлять в нее человека.</li>

            <li>Нужно сделать отчет (тут можно не использовать никакие классы, важен 
                именно запрос к базе данных, отчет должен получаться при помощи ОДНОГО 
                запроса к базе данных):<br/><br/>

                    <table class="table table-striped table-bordered" style="width:auto;">
                        <thead>
                            <tr>
                                <td>Магазин</td>
                                <td>Человек</td>
                                <td>Взрослый/Ветеран</td>
                                <td>Товар</td>
                                <td>Место в очереди</td>
                            </tr>
                        </thead>

                        <tbody>
                            <tr>
                                <td>…</td>
                                <td>…</td>
                                <td></td>
                                <td>…</td>
                                <td></td>
                            </tr>
                        </tbody>
                    </table>

                    В этом отчете будут дубли по некоторым колонкам, это нормально.
                </li>
        </ul>

        <p>Сам функционал движения очереди создавать НЕ НАДО, у нас очередь статичная, 
            то есть она просто существует и туда можно добавлять новых людей. Количество 
            товара тоже учитывать НЕ НАДО. Удаление покупателя из очереди также 
            реализовывать НЕ НАДО.</p>

        <p>Желательно в архитектуре предусмотреть, что очередь в будущем может быть не 
            только в эти 2 магазина с указанными правилами, но и еще в какой-нибудь 
            (точнее, рассказать, как нужно будет переделать программу, чтобы добавить в 
            нее новый тип магазина).</p>
    </div>
</div>


<!-- 
    База данных 
-->
<div class="tab" id="tab2">
    <div class="header">
        <h1>База данных </h1>
        <div class="icon-chevron-down"></div>
    </div>
    
    <div class="body">
        <div class="row">
            <a href="#" class="thumbnail" style="display:inline-block;">
                <img style="display:block;" src="/resources/dia-db.png" alt="..."/>
            </a>
        </div>
    </div>
</div>


<!-- 
    Структура моделей 
-->
<div class="tab" id="tab3">
    <div class="header">
        <h1>Модели, их структура</h1>
        <div class="icon-chevron-down"></div>
    </div>
    
    <div class="body">
        <a href="#" class="thumbnail" style="display:inline-block;">
            <img style="display:block;" src="/resources/dia-model.png" alt="..."/>
        </a>
    </div>
</div>


<!-- 
    Заметки по проекту 
-->
<div class="tab" id="tab4">
    <div class="header">
        <h1>Заметки по проекту</h1>
        <div class="icon-chevron-down"></div>
    </div>
    
    <div class="body">
        <ul>
            <li>При выполнении тестового задания я позволил себе немного расширить рамки,
            предлагаемые заданием, но при этом ни разу не упрощал этими вольностями эту
            работу. В реальной практике без особого указания подобные вольности в
            трактовании ТЗ допускаться не будут.</li>
            
            <li>Насколько я понял из текста задания, его было необходимо реализовать
            с нуля, без использования фреймворков. В реальной практике я, разумеется,
            использовал бы фреймворки без изобретения кривых упрощенных велосипедов.
            Исключение - фреймворки верстки, <strong>Bootstrap CSS</strong> и 
            <strong>jQuery</strong>, без которых быстрая разработка попросту невозможна.</li>
            
            <li>В коде я не старался соблюдать 80-символьную длину строки. Данное
            требование мне слишком неудобно, чтобы я его соблюдал без особого указания.</li>
            
            <li>Использовались новые возможности PHP, такие, как позднее-статическое 
                связывание и замыкания. Обратная совместимость? Не, не слышали.</li>
            
            <li>Реализация моделей - я увидел несколько путей их реализации.
                <ul>
                    <li>Первый - процедурный, ActiveRecord, реализация требований
                        через валидацию данных. Самый простой, самый эффективный
                        и самый расширяемый способ, минус - от ООП остается лишь одно
                        название.</li>
                    
                    <li>Второй путь - чистое ООП. Минус - очень сложно на ООП
                        объяснить связи между другими моделями, но еще сложнее
                        "объяснить" это на SQL без сотни запросов и без грубых
                        запросов, когда из одного класса меняется представления
                        об объектах других классов. Это еще не минус по сравнению
                        с необходимостью писать один и тот же код по вставке, 
                        получению данных, etc.
                        
                    <li>В итоге я использовал ООП+ActiveRecord, где второй компонент 
                        поддерживал основные, универсальные методы, недоступные
                        по-умолчанию внешне, но которые могли бы
                        пригодиться каждому классу, и не стал брезговать "грубыми"
                        запросами, поскольку у меня не бесконечное время. Поэтому
                        непосредственно в моделях нечасто встречается SQL-код.</li>
                </ul>
            </li>
            
            <li>Товары "Каша" и "Каша", но с разными id считаются разными. Реализовать
                различие просто, но, насколько я понял, в задании не требовалось.</li>
            
            <li>О "переносимость между разными СУБД" я не задумывался. Нужно 
                было бы - задумался.</li>
            
            <li>Я не старался покрыть тестами весь код и тестировал только то, 
                что требовалось - причина, опять же, далеко не бесконечное время</li>
            
            <li>Есть уязвимости в JS, о которых я знаю, но решать их - времени нет.</li>
        </ul>
    </div>
</div>

<!-- 
    Расширяемость
-->
<div class="tab" id="tab5">
    <div class="header">
        <h1>Информация о расширяемости</h1>
        <div class="icon-chevron-down"></div>
    </div>
    
    <div class="body">
        <ul>
            <li>Для добавления новых категорий покупателей достаточно создать новый класс
            Person(Название) в application/model/ и наследовать его от Person.
            Также желательно переопределить, перегрузить статический метод
            explainType(), который возвращает человеко-понятное объяснение
            об этом классе, данная информация используется в представлении.
            В файле application/layout/pages/Person.php также требуется добавить
            информацию о новых типах.
            </li>
            
            <li>Аналогичным образом расширяется и Store, магазины</li>
            
            <li>Так как "тип" магазина в данном решении != сам магазин(равно как
            и в случаи с покупателями) то создавать можно сколько угодно магазинов
            и определять отдельные очереди к каждому из них.</li>
        </ul>
    </div>
</div>

<div class="tab" id="tab6">
    <div class="header">
        <h1>Процесс разработки</h1>
        <div class="icon-chevron-down"></div>
    </div>
    <div class="body">
        <a href="#" class="thumbnail" style="display:inline-block;">
            <img style="display:block;" src="/resources/i-have-no-idea-what-im-doing-dog.jpg" alt="..."/>
        </a>
    </div>
</div>